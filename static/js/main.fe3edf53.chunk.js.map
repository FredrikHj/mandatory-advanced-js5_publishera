{"version":3,"sources":["store.js","Components/Login.js","Components/Auth.js","Components/FileAction.js","Components/CheckItemType.js","Components/RenderList.js","Components/DbxContents.js","Components/NavFileStructure.js","Components/Home.js","MainApp.js","serviceWorker.js","index.js"],"names":["logedIn$","BehaviorSubject","localStorage$","window","localStorage","getItem","currentPath$","updateCurrentPath","currentPath","next","Dropbox","require","Login","props","react_default","a","createElement","Fragment","id","react_router_dom","to","onClick","authenticationUrl","clientId","getAuthenticationUrl","location","Auth","_useState","useState","_useState2","Object","slicedToArray","redirect","setRedirect","useEffect","accessToken","subscribe","queryString","parse","hash","access_token","setItem","console","log","updateLocalStorage","react_router","FileActionBtn","setCurrentPath","_useState3","_useState4","reviewList","setReviewList","_useState5","_useState6","itemToUpload","setItemToUpload","_useState7","_useState8","newfolderName","setNewfolderName","_useState9","_useState10","logOut","setLogOut","cleanedCurrentPath","getUser","value","gerCleanedPath","replace","filesListFolder","path","then","response","getItemArr","entries","catch","error","map","item","path_lower","type","onChange","e","preventDefault","target","files","className","filesUpload","contents","name","mode","res","filesCreateFolderV2","nameForFolder","removeItem","folderIndex","countItem","CheckItemType","itemPath","emtyFolder","setEmtyFolder","getfileObj","fileObj","folderEmpty","getFolderArrEmty","length","folderEmptyStr","children","checkFolderEmpty","colSpan","downLoadFile","data-countitem","checkFolders","src","thumbnail","alt","modData","getModTime","split","fixModified","client_modified","size","sizeInMb","parseFloat","Math","round","toFixed","fixSize","checkFiles","getPath","getCleanPathName","reverse","fixPathName","pathLocation","pathname","showFileList","RenderList","setThumbnail","filesGetThumbnail","getThumbnailUrl","URL","createObjectURL","fileBlob","DbxContents","setAccessToken","setShowFileList","delItem","setdDelItem","delItemName","setdDelItemName","_useState11","_useState12","itemToDel","setItemToDel","targetItemListNr","askRemoveItem","targetItem","parseInt","dataset","countitem","getFullName1","setTimeout","reload","style","display","filesDeleteV2","newItemList","concat","toConsumableArray","slice","fileCounter","key","listLength","NavFileStructure","subFolderPath","idx","fullPathArr","join","indicateNewFolder","pathLink","charAt","toUpperCase","Home","_PureComponent","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","logedIn","getFileItem","PureComponent","MainApp","authorizate","_this2","setState","unsubscribe","Helmet","charSet","href","rel","basename","process","exact","component","Boolean","hostname","match","ReactDOM","render","src_MainApp","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe3edf53.chunk.js","sourcesContent":["import {BehaviorSubject} from \"rxjs\";\r\nconst logedIn = false;\r\nconst currentPath = '';\r\n\r\nexport const logedIn$ = new BehaviorSubject(logedIn);\r\nexport const localStorage$ = new BehaviorSubject(window.localStorage.getItem('insurtUrlParts'));\r\n\r\nexport const currentPath$ = new BehaviorSubject(currentPath);\r\n\r\nexport function updateLocalStorage(accessToken) {\r\n  console.log(accessToken);\r\n  localStorage$.next(accessToken);\r\n}\r\nexport function updateLogedIn(logedIn) {  \r\n  logedIn$.next(logedIn);\r\n}\r\nexport function updateCurrentPath(currentPath) {\r\n  currentPath$.next(currentPath);\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { BrowserRouter as Router, Route, Link, Redirect} from \"react-router-dom\";\r\n\r\n// Access for Dropbox\r\nconst Dropbox = require('dropbox').Dropbox;\r\n\r\nexport function Login(props) {  \r\n  function login() {\r\n    // Authorization\r\n    let dbx = new Dropbox({ clientId: '8y7xb20904fqrl7' });\r\n    const webbsiteAdressOnline = 'http://fredrikHj.github.io/mandatory-advanced-js5/';\r\n    const webbsiteAdressLocal = 'http://localhost:3000/Auth';\r\n    let authenticationUrl = dbx.getAuthenticationUrl(webbsiteAdressOnline);\r\n        \r\n    // Render Authorization component and redirect to Dropbox for Auth \r\n    window.location = authenticationUrl;    \r\n  }\r\n      return (\r\n        <> <div id=\"loginContainer\">\r\n              <Link id=\"connectBtn\" to=\"/Auth\" onClick={ login }>Anslut</Link>\r\n           </div>\r\n        </>\r\n      );\r\n    }\r\n","import React, {useState, useEffect} from 'react';\r\nimport { BrowserRouter as Router, Route, Link, Redirect} from \"react-router-dom\";\r\nimport queryString from \"query-string\"; // Avinstallera\r\nimport { updateLocalStorage, localStorage$, logedIn$ } from '../store';\r\n\r\nexport function Auth(props) {  \r\n  const [ redirect, setRedirect] = useState(false);\r\n  useEffect(() => {\r\n\r\n    let subscription = localStorage$.subscribe((localStorage) => { \r\n/*       if (!localStorage) {\r\n        setUrlData(localStorage$.value);\r\n      } */\r\n    });\r\n    urlCleaner();\r\n    let urlContent = props.location.hash;\r\n    if (urlContent != '') {\r\n      setRedirect(true);\r\n    }\r\n  });\r\n\r\n  function urlCleaner() {\r\n    // Get the url and clean the string from letters = and &. Save the string parts into a object. \r\n    const parsedHash = queryString.parse(props.location.hash);\r\n    const accessToken = parsedHash.access_token;\r\n\r\n    saveInLocalStorage(accessToken);\r\n    setRedirect(true);\r\n  }\r\n  function saveInLocalStorage(accessToken) {\r\n    // Saving the URIObj in localStorage\r\n    window.localStorage.setItem('insurtUrlParts', accessToken );\r\n    updateLocalStorage(accessToken);\r\n\r\n  }\r\n  if (redirect === true) return <Redirect to=\"/Home\"/>;\r\n  return (\r\n    <div>Du skickas nu till Dropbox för inloggning .....</div>\r\n  );\r\n}\r\n\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport { localStorage$, currentPath$ } from '../store';\r\nimport { BrowserRouter as Router, Route, Link, Redirect} from \"react-router-dom\";\r\n// Get Dropbox method\r\nconst Dropbox = require('dropbox').Dropbox;\r\n\r\nexport function FileActionBtn(props) {\r\n  const [ currentPath, setCurrentPath] = useState('');\r\n  const [ reviewList, setReviewList] = useState([]);\r\n  const [ itemToUpload, setItemToUpload ] = useState({});\r\n  const [ newfolderName, setNewfolderName ] = useState('');\r\n  const [ logOut, setLogOut ] = useState(false);\r\n\r\n  let cleanedCurrentPath = '';\r\n\r\n  let getUser = new Dropbox({accessToken: localStorage$.value });\r\n  \r\n  useEffect (() => {\r\n    let subscription = currentPath$.subscribe((currentPath) => { \r\n      setCurrentPath(currentPath);\r\n    });\r\n    \r\n    gerCleanedPath();\r\n    \r\n    getUser.filesListFolder({path: cleanedCurrentPath})\r\n    .then(response => {\r\n      let getItemArr = response.entries;\r\n      \r\n      setReviewList(getItemArr);\r\n      \r\n      // ===========================================================================================================\r\n    })\r\n    .catch(error => {\r\n      console.error(error);\r\n    }); \r\n  },  [ currentPath ]);\r\n  function gerCleanedPath() {\r\n    let cleanedCurrentPath = currentPath.replace(/%20/g, \" \");\r\n    if (cleanedCurrentPath === \"/\") {\r\n      cleanedCurrentPath = \"\";\r\n    }\r\n    return cleanedCurrentPath;\r\n  }\r\n  \r\n  let patchInCurrentFolder = reviewList.map(item => item.path_lower);\r\n\r\n  // Upload a file\r\n  function onChangeFile(e){\r\n    e.preventDefault();\r\n    setItemToUpload(e.target.files);\r\n  }\r\n  function upLoadFile(e) {\r\n    e.preventDefault();\r\n    console.log(itemToUpload[0]);\r\n    \r\n    //const tagetItem = e.target.value;\r\n    \r\n    let cleanedCurrentPath = currentPath.replace(/%20/g, \" \");\r\n    gerCleanedPath();\r\n    \r\n    getUser.filesUpload({\r\n      contents: itemToUpload[0],\r\n      path: currentPath$.value + '/' + itemToUpload[0].name,\r\n      mode: 'add',\r\n    })\r\n    .then((res) => {\r\n      getUser.filesListFolder({path: cleanedCurrentPath})\r\n      .then((res) => {\r\n        let getItemArr = res.entries;\r\n        console.log(setReviewList);\r\n        setReviewList(getItemArr);\r\n      });\r\n\r\n    })\r\n  }\r\n  function newFolderName(e) {\r\n    e.preventDefault();\r\n    let nameForFolder = e.target.value;\r\n    setNewfolderName(nameForFolder);\r\n  }\r\n  function createFolder(e){\r\n    e.preventDefault();\r\n      console.log(newfolderName);   \r\n      gerCleanedPath();\r\n    getUser.filesCreateFolderV2({\r\n      path: currentPath + '/' + newfolderName\r\n    })\r\n    .then((res) => {\r\n      getUser.filesListFolder({path: cleanedCurrentPath})\r\n      .then((res) => {\r\n        let getItemArr = res.entries;\r\n        console.log(setReviewList);\r\n        setReviewList(getItemArr);\r\n      });\r\n    })\r\n  }\r\n  function disconnect() {\r\n    setLogOut(true);\r\n    console.log(logOut);\r\n    localStorage.removeItem('insurtUrlParts');\r\n  }\r\n    return (\r\n      <>\r\n        {(logOut === true) ? <Redirect to=\"/\"/> :\r\n        <section id=\"actionBtnContainer\">  \r\n          <form>\r\n            <input id=\"itemToUpLoad\" type=\"file\" onChange={ onChangeFile }/>\r\n            <button \r\n              className=\"button btnUpLoad\"\r\n              type=\"submit\"\r\n              value=\"\"\r\n              onClick={ upLoadFile }>\r\n                Ladda Upp\r\n            </button>\r\n          </form>           \r\n\r\n          <form>\r\n            <i className=\"button material-icons\" id=\"newFolder\" onClick={ createFolder }>\r\n                create_new_folder\r\n              </i>\r\n            <input id=\"createFoldersName\" type=\"text\" onChange={ newFolderName }/>\r\n          </form>       \r\n          <button className=\"button logOutBtn\"onClick={ disconnect }> Logga Ut</button>\r\n        </section>\r\n        }\r\n      </>\r\n    );\r\n  }\r\n","import React, {useState, useEffect} from 'react';\r\nimport { BrowserRouter as Router, Route, Link, Redirect} from \"react-router-dom\";\r\nimport { localStorage$, updateCurrentPath } from '../store';\r\nconst Dropbox = require('dropbox').Dropbox;\r\n\r\nlet folderIndex = 0;\r\nlet countItem = 0;\r\n\r\nexport function CheckItemType(props) {\r\n    const [ emtyFolder, setEmtyFolder ] = useState('');\r\n    let getfileObj = props.fileObj; \r\n    \r\n    let itemPath;\r\n    let currentPath = getfileObj.path_lower//path_display;\r\n    checkFolders(getfileObj, currentPath);\r\n    checkFiles(getfileObj, currentPath);\r\n    function checkFolders(getfileObj, currentPath) {\r\n        // Folder handle\r\n        if (getfileObj['.tag'] === 'folder') {\r\n            countItem++;\r\n            let folderEmpty = '';\r\n            folderIndex++;\r\n            checkFolderEmpty(currentPath);\r\n            itemPath =\r\n                <>\r\n                    <td colSpan=\"3\" id={ currentPath } onClick={ props.downLoadFile }>\r\n                        <i className=\"material-icons starBtnFolders\" //style={(staredItem === false) ? {color: 'none'} : {color: 'orange' }} id={ 0 } //onClick={ handleStarFolders }\r\n                        >\r\n                            star\r\n                        </i>\r\n                        <Link to={ '/Home'+ currentPath } className=\"folderLink\" id={ folderIndex }>\r\n                            <i className=\"material-icons folders\"> folder </i>\r\n                            <span className=\"folderName\">-{ getfileObj.name + emtyFolder }</span>\r\n                        </Link>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <i className=\"material-icons\" id={ currentPath } data-countitem={ countItem } // ges fel värde?\r\n                        onClick={ props.removeItem }>\r\n                            clear\r\n                        </i>\r\n                    </td>\r\n                </>\r\n        }\r\n        return countItem;\r\n    }\r\n    function checkFolderEmpty(currentPath, folderEmpty) {        \r\n        let getUser = new Dropbox({accessToken: localStorage$.value });\r\n\r\n        getUser.filesListFolder({path: currentPath})\r\n        .then(response => {\r\n            let getFolderArrEmty = response.entries.length;\r\n            if (getFolderArrEmty === 0) {\r\n                let folderEmptyStr =  <p> ( Mappen är tom! )</p>;\r\n                folderEmpty = folderEmptyStr.props.children;            \r\n            }\r\n            if (getFolderArrEmty != 0) {\r\n                folderEmpty = '';\r\n            }\r\n            setEmtyFolder(folderEmpty);\r\n        });\r\n    }\r\n    function checkFiles(getfileObj, currentPath) {\r\n        //File handler\r\n        if (getfileObj['.tag'] === 'file') {\r\n            countItem++;\r\n            itemPath = \r\n            <>\r\n                <td id={ currentPath } onClick={ props.downLoadFile }>\r\n                    <i className=\"material-icons starBtnFiles\">\r\n                        star\r\n                    </i>\r\n                    <img className=\"files\" src={ props.thumbnail } alt=\"En fil ikon\"/>\r\n                    { getfileObj.name }\r\n                </td>\r\n                <td>\r\n                { fixModified(getfileObj.client_modified) }\r\n                </td>\r\n                <td>\r\n                { fixSize(getfileObj.size) + 'mb'}\r\n                </td>      \r\n                <td>\r\n                <i className=\"material-icons\"  id={ currentPath } data-countitem={ countItem } onClick={ props.removeItem }>\r\n                    clear\r\n                </i>\r\n                </td>\r\n            </>\r\n        }\r\n    }\r\n\r\n    let getPath = props.pathLocation.pathname;\r\n    fixPathName(getPath);\r\n    function fixPathName(getPath) {\r\n        \r\n        let getCleanPathName = getPath.split('Home').reverse()[0];    \r\n        if (getCleanPathName === 'Home') {\r\n            // Default value\r\n            getCleanPathName = '';\r\n        }\r\n        updateCurrentPath(getCleanPathName);\r\n    }\r\n    function fixModified(modData) {\r\n        let getModTime = modData.split('T')[1].split(':');       \r\n        let getModDate = modData.split('T')[0];\r\n        return getModDate + ' | ' + getModTime[0] + ':' + getModTime[1];\r\n    }\r\n    function fixSize(size) {\r\n        let sizeInMb = size/(1024*1024);\r\n        let formatSize2Decim = parseFloat(Math.round(sizeInMb * 100) / 100).toFixed(2);\r\n        return formatSize2Decim;\r\n    }    \r\n    // Fix that the countItem are count according to nr of item in the list\r\n    if (countItem === props.showFileList.length) {\r\n        countItem = 0;\r\n    }\r\n    return itemPath;\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { localStorage$, updateCurrentPath } from '../store';\r\nimport { BrowserRouter as Router, Route, Link, Redirect} from \"react-router-dom\";\r\nimport { CheckItemType } from './CheckItemType';\r\n\r\n// Get Dropbox method\r\nconst Dropbox = require('dropbox').Dropbox;\r\n\r\nexport function RenderList(props) {\r\n    const  [thumbnail, setThumbnail ] = useState('');\r\n    const [staredItem, setStaredItem ] = useState(false);\r\n    let getUser = new Dropbox({accessToken: localStorage$.value });\r\n    \r\n    let getfileObj = props.fileObj;\r\n    \r\n    let thumbnails = '';\r\n    let itemPath;\r\n    \r\n    useEffect(() => {                   \r\n        getUser.filesGetThumbnail({\r\n            path: getfileObj.path_lower,\r\n            size: 'w64h64',\r\n            //format: 'jpeg',\r\n        })\r\n        .then((res) => {\r\n            let getThumbnailUrl = URL.createObjectURL(res.fileBlob);             \r\n            setThumbnail(getThumbnailUrl);\r\n        }).catch(error => {\r\n            //console.log(error);    \r\n        });    \r\n        \r\n    }, [ getfileObj.path_lower ]);\r\n\r\n    let star;\r\n    let toggle = 0;\r\n    function handleStarFolders(e) {\r\n        let targetStar = e.target.id;\r\n        console.log(toggle);\r\n        \r\n        let turnTargetToNr = parseInt(targetStar);\r\n        //console.log(turnTargetToNr);\r\n        //console.log(staredItem);\r\n        \r\n        if(toggle === 0){\r\n            \r\n            toggle = '1';\r\n            star = true;\r\n        }\r\n        if(toggle === 1){\r\n            toggle = 0;\r\n            star = false;\r\n        }\r\n            setStaredItem(star)\r\n    \r\n    }\r\n    \r\n        let getItem = <CheckItemType\r\n            pathLocation={ props.pathLocation }\r\n            fileObj={ props.fileObj }\r\n            showFileList ={ props.showFileList }\r\n            thumbnail={ thumbnail }\r\n            removeItem={ props.removeItem }\r\n            downLoadFile={ props.downLoadFile }\r\n        />\r\n\r\n    return getItem  \r\n}","import React, {useState, useEffect} from 'react';\r\nimport { localStorage$, currentPath$, updateCurrentPath } from '../store';\r\nimport { RenderList } from './RenderList';\r\nimport { BrowseRouter as Router, Route, Link, Redirect} from \"react-router-dom\";\r\nconst Dropbox = require('dropbox').Dropbox;\r\n\r\nexport function DbxContents(props) {\r\n  const [ accessToken, setAccessToken] = useState('');\r\n  const [ currentPath, setCurrentPath] = useState('');\r\n  const [showFileList, setShowFileList ] = useState([]);\r\n  const [delItem, setdDelItem ] = useState(false);\r\n  const [delItemName, setdDelItemName ] = useState('');\r\n  const [itemToDel, setItemToDel ] = useState('');\r\n  let targetItemListNr = 0;\r\n\r\n  console.log(localStorage$.value );\r\n  \r\n  let getUser = new Dropbox({accessToken: localStorage$.value });\r\n  \r\n  //const [ listEmpty, updateListEmpty ] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    let subscription = localStorage$.subscribe((localStorage) => { \r\n      setAccessToken(localStorage);\r\n    });  \r\n    subscription = currentPath$.subscribe((currentPath) => { \r\n      setCurrentPath(currentPath);\r\n    });  \r\n    \r\n    let cleanedCurrentPath = currentPath.replace(/%20/g, \" \");\r\n    \r\n    if (cleanedCurrentPath === \"/\") {\r\n      cleanedCurrentPath = \"\";\r\n    }\r\n    getUser.filesListFolder({\r\n      path: cleanedCurrentPath,\r\n    })\r\n    .then(response => {\r\n      let getItemArr = response.entries;\r\n      setShowFileList(getItemArr);\r\n      \r\n      // En genväg på problemet att komma tillbaka när en folder är tom --> du skickas alltid till root folder hur fixar jag detta så man kommer till foldern över i mappstrukturen?\r\n      if (getItemArr.length === 0) {\r\n        console.log('Tomt!');\r\n        \r\n        setTimeout( function emptyFolder() {\r\n          window.location.reload();\r\n          updateCurrentPath('/Home');\r\n        }, 1000);\r\n      }\r\n      // ===========================================================================================================\r\n    })\r\n    .catch(error => {\r\n      console.error(error);\r\n    }); \r\n    \r\n    //subscription.unsubscribe();\r\n  }, [ currentPath ]); \r\n\r\n  // Fix almost download ;)\r\n  function downLoadFile(e) {\r\n    const targetItem = e.target.id;\r\n    console.log();\r\n    \r\n\r\n  }\r\n  function askRemoveItem (e) {\r\n    let targetItem = e.target.id;\r\n    let targetItemListNr = parseInt(e.target.dataset.countitem);\r\n    console.log(targetItemListNr);\r\n    \r\n    let getFullName1 = targetItem.split('/').reverse();\r\n    let getDisplayName = getFullName1[0].split('.');\r\n    \r\n    console.log(getFullName1[0]);\r\n    \r\n    setdDelItemName(getFullName1[0]);\r\n    setItemToDel(targetItem);\r\n    setdDelItem(true);\r\n  }\r\n  function removeItemYes() {\r\n    getUser.filesDeleteV2({\r\n      path: itemToDel\r\n    });\r\n    // Koden tar bort Översta i listan och efter refresh är den tillbaka inkl den riktiga är borta\r\n    let newItemList = [ ...showFileList.slice(0, targetItemListNr),  ...showFileList.slice(targetItemListNr + 1)];\r\n    console.log(newItemList);\r\n    setShowFileList(newItemList);\r\n    setdDelItem(false);\r\n  }\r\n  function removeItemNo() {\r\n    setdDelItem(false);\r\n  }\r\nreturn (\r\n  <section id=\"tContainer\">\r\n    <div id=\"askDelContainer\" style={(delItem === true) ? { display: 'block' } : { display: 'none' }}>\r\n      <p id=\"delAsk\">{ 'Radera ' + delItemName + ' ?' }</p>\r\n      <section id=\"askDelBtnConatiner\">\r\n        <button className=\"button askDelBtn\" onClick={ removeItemNo }>Nej</button><button className=\"button askDelBtn\" onClick={ removeItemYes }>Ja</button>\r\n      </section>\r\n    </div> \r\n      {(showFileList.length != 0) ?\r\n        <table id=\"itemContainer\">\r\n          <thead>\r\n            <tr>\r\n              <th>Mapp / Fil</th><th>Ändrad</th><th>Storlek</th><th>Verktyg</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n                showFileList.map((fileObj, fileCounter ) => {\r\n                  return(\r\n                    <tr className=\"fontColor\" key={ fileCounter }>\r\n                      <RenderList \r\n                        pathLocation={ props.location }\r\n                        fileObj={ fileObj }\r\n                        listLength ={ showFileList.length }\r\n                        removeItem={ askRemoveItem }\r\n                        showFileList={ showFileList }\r\n                        downLoadFile={ downLoadFile }\r\n                      />\r\n                    </tr>\r\n                  );\r\n                })\r\n            }           \r\n          </tbody>\r\n        </table> : 'Hämtar listan!'\r\n        }\r\n      </section>\r\n    );\r\n  }\r\n  \r\n\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport { BrowserRouter as Router, Route, Link, Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport function NavFileStructure(props) {   \r\n    return (\r\n        <section>\r\n            <p>Var är jag:\r\n                {\r\n                    props.location.pathname.split(\"/\").map((subFolderPath, idx, fullPathArr) => {\r\n                        const patchArr = fullPathArr.slice(1, idx + 1);\r\n                        const currentPath = '/' + patchArr.join('/');\r\n\r\n                        let indicateNewFolder = '';\r\n                        let pathLink = '';\r\n                        if (subFolderPath === '') {\r\n                            indicateNewFolder = '';\r\n                            pathLink = 'pathLink1';\r\n                        }\r\n                        if (subFolderPath != '' && subFolderPath != 'Home') {\r\n                            indicateNewFolder = '/';\r\n                            pathLink = 'pathLink2';\r\n                        }\r\n                        let insurtElement = <Link to={ currentPath } key={ idx }className={ pathLink} >{indicateNewFolder + subFolderPath.charAt(0).toUpperCase() + subFolderPath.slice(1)}</Link>;                        \r\n                        return insurtElement;\r\n                    })\r\n                \r\n                }\r\n            </p>\r\n        </section>\r\n    );\r\n  }\r\n","import React, { PureComponent } from 'react';\r\n//import { BrowserRouter as Router, Route, Link, Redirect} from \"react-router-dom\";\r\nimport { FileActionBtn } from './FileAction';\r\nimport { DbxContents } from './DbxContents';\r\nimport { NavFileStructure } from './NavFileStructure';\r\n\r\nimport { updateLogedIn } from '../store';\r\n\r\n// Get Dropbox method\r\n//const Dropbox = require('dropbox').Dropbox;\r\n\r\nexport class Home extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    }\r\n  }\r\n  componentDidMount() { \r\n    \r\n    let currentPath = '';\r\n    updateLogedIn(true);\r\n  }\r\n  \r\n  render() {   \r\n    return (\r\n      <>\r\n        <section className=\"contentContainer\">\r\n          <main id=\"contentContainer\">\r\n            <NavFileStructure location={this.props.location} />\r\n            {\r\n              <DbxContents \r\n                location={this.props.location}\r\n                showFileList={ this.state.showFileList }\r\n                getFileItem={ this.getFileItem }\r\n              /> \r\n            }\r\n          </main>\r\n          <aside>\r\n            <FileActionBtn/>\r\n          </aside>\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n  ","import React, { PureComponent } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Link, Redirect} from \"react-router-dom\";\r\n\r\nimport { logedIn$ } from './store';\r\nimport { Login } from './Components/Login';\r\nimport { Auth } from './Components/Auth';\r\nimport { Home } from './Components/Home';\r\n\r\nclass MainApp extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      authorizate: false,\r\n      logedIn: false,\r\n    } \r\n  }\r\n  componentDidMount() {\r\n    let subscription = logedIn$.subscribe((logedIn) => { \r\n      if (logedIn) {\r\n        this.setState({logedIn: logedIn$.value});\r\n      }\r\n    });\r\n    subscription.unsubscribe();\r\n    if (this.state.authorizate === false) return <Redirect to=\"/\"/>;\r\n    let uriData = window.location.hash;\r\n  }\r\n  componentWillUnmount() {\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <Helmet>\r\n          <meta charSet=\"utf-8\" />\r\n          <title>Fil Tjänst - {(this.state.logedIn === false ) ? 'Ej inloggad' : 'Inloggad' }\r\n          </title>\r\n          <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\r\n            rel=\"stylesheet\">\r\n          </link>\r\n        </Helmet>\r\n        <div id=\"appBody\">\r\n          <section id=\"appBody__dashboard\">\r\n          </section>\r\n          \r\n          <main id=\"appBody__mainContent\">\r\n            <header id=\"header\">\r\n              <section>\r\n                <p id=\"headline\">En Fil tjänst</p>\r\n                <div></div>\r\n              </section>\r\n            </header>\r\n            <main id=\"mainContent\">\r\n\r\n            <Router basename={process.env.PUBLIC_URL}> \r\n              <Route exact path=\"/\" component={ Login } />\r\n              <Route path=\"/Auth\" component={ Auth } />\r\n              <Route path=\"/Home\" component={ Home }/>\r\n            </Router>\r\n          </main>\r\n          <footer>\r\n            Uppförd av Team Fredrik  \r\n          </footer>\r\n          </main>           \r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import { BrowseRouter as Router, Route, Link, Redirect} from \"react-router-dom\";    \r\nimport './dropbox.css';\r\nimport App from  './MainApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n//    <Router basename={process.env.PUBLIC_URL}>\r\n     <App />,\r\n//    </Router>,      \r\ndocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}